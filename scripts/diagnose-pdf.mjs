/**
 * –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */

import { runPdfDiagnostics, formatDiagnosticsForLogs } from '../src/pdf/pdfDiagnostics.js';
import { logger } from '../src/logger.js';

async function main() {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É PDF —Å–∏—Å—Ç–µ–º—ã...\n');

    const diagnostics = await runPdfDiagnostics();
    const summary = formatDiagnosticsForLogs(diagnostics);

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
    console.log('========================\n');

    console.log(`‚è∞ –í—Ä–µ–º—è: ${diagnostics.timestamp}`);
    console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${diagnostics.environment}`);
    console.log(`üñ•Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${diagnostics.platform} (${diagnostics.arch})`);
    console.log(`üì¶ Node.js: ${diagnostics.nodeVersion}`);
    console.log(`üíæ –ü–∞–º—è—Ç—å: ${Math.round(diagnostics.memoryUsage.heapUsed / 1024 / 1024)}MB\n`);

    console.log('üß™ –¢–µ—Å—Ç—ã:');
    console.log('--------\n');

    Object.entries(diagnostics.tests).forEach(([_key, test]) => {
      const status = test.status === 'success' ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${test.name}: ${test.status}`);

      if (test.status === 'failed' && test.error) {
        console.log(`   –û—à–∏–±–∫–∞: ${test.error.message}`);
        if (test.error.code) {
          console.log(`   –ö–æ–¥: ${test.error.code}`);
        }
      }

      if (test.details) {
        Object.entries(test.details).forEach(([detailKey, detailValue]) => {
          if (typeof detailValue === 'boolean') {
            console.log(`   ${detailKey}: ${detailValue ? '‚úÖ' : '‚ùå'}`);
          } else if (typeof detailValue === 'number') {
            console.log(`   ${detailKey}: ${detailValue}`);
          } else if (typeof detailValue === 'string' && detailValue.length < 100) {
            console.log(`   ${detailKey}: ${detailValue}`);
          }
        });
      }
      console.log('');
    });

    console.log('üìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:');
    console.log('---------------');

    if (summary.overallStatus === 'healthy') {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ PDF —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (summary.overallStatus === 'degraded') {
      console.log('‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ PDF —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏');
    } else {
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π PDF');
    }

    if (summary.failedTests.length > 0) {
      console.log('\nüö® –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
      summary.failedTests.forEach((test) => {
        console.log(`   ‚Ä¢ ${test.name}: ${test.error}`);
      });
    }

    if (summary.passedTests.length > 0) {
      console.log('\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
      summary.passedTests.forEach((test) => {
        console.log(`   ‚Ä¢ ${test.name}`);
      });
    }

    console.log('\nüìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–≥-—Ñ–∞–π–ª');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.message);
    logger.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ PDF', {
      error: error.message,
      stack: error.stack,
    });
    throw error;
  }
}

main();
