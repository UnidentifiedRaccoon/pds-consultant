/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
 */

import { runPdfDiagnostics } from '../src/pdf/pdfDiagnostics.js';
import { logger } from '../src/logger.js';

async function checkProductionPdf() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º PDF —Å–∏—Å—Ç–µ–º—É –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...\n');

    const diagnostics = await runPdfDiagnostics();

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
    console.log('========================\n');

    console.log(`‚è∞ –í—Ä–µ–º—è: ${diagnostics.timestamp}`);
    console.log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${diagnostics.environment}`);
    console.log(`üñ•Ô∏è  –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${diagnostics.platform} (${diagnostics.arch})`);
    console.log(`üì¶ Node.js: ${diagnostics.nodeVersion}`);
    console.log(`üíæ –ü–∞–º—è—Ç—å: ${Math.round(diagnostics.memoryUsage.heapUsed / 1024 / 1024)}MB\n`);

    console.log('üß™ –¢–µ—Å—Ç—ã:');
    console.log('--------\n');

    let allPassed = true;

    Object.entries(diagnostics.tests).forEach(([_key, test]) => {
      const status = test.status === 'success' ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${test.name}: ${test.status}`);

      if (test.status === 'failed') {
        allPassed = false;
        if (test.error) {
          console.log(`   –û—à–∏–±–∫–∞: ${test.error.message}`);
          if (test.error.code) {
            console.log(`   –ö–æ–¥: ${test.error.code}`);
          }
        }
      }

      if (test.details) {
        Object.entries(test.details).forEach(([detailKey, detailValue]) => {
          if (typeof detailValue === 'boolean') {
            console.log(`   ${detailKey}: ${detailValue ? '‚úÖ' : '‚ùå'}`);
          } else if (typeof detailValue === 'number') {
            console.log(`   ${detailKey}: ${detailValue}`);
          } else if (typeof detailValue === 'string' && detailValue.length < 100) {
            console.log(`   ${detailKey}: ${detailValue}`);
          }
        });
      }
      console.log('');
    });

    console.log('üìà –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:');
    console.log('---------------');

    if (allPassed) {
      console.log('‚úÖ PDF —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
      return;
    } else {
      console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å PDF —Å–∏—Å—Ç–µ–º–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
      console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
      console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä—ã Playwright —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
      console.log('4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      throw new Error('PDF —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PDF —Å–∏—Å—Ç–µ–º—ã:', error.message);
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ', {
      error: error.message,
      stack: error.stack,
    });
    throw error;
  }
}

checkProductionPdf();
