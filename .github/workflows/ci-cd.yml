name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: pds-consultant

jobs:
  test:
    name: Tests and Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'

      - name: Install deps (clean)
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

      - name: Prepare .env for smoke tests
        run: |
          cat > .env <<'EOF'
          TELEGRAM_BOT_TOKEN=dummy
          DEV_PORT=8080
          WEBHOOK_SECRET=replace_me
          PUBLIC_BASE_URL=
          LOG_LEVEL=warn
          YC_API_KEY=dummy
          YC_FOLDER_ID=dummy
          YC_GPT_MODEL=yandexgpt/latest
          YC_GPT_ENDPOINT=https://llm.api.cloud.yandex.net/foundationModels/v1/chat/completions
          EOF

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Run basic smoke tests
        env:
          CI: true
        run: npm run smoke:basic

      - name: Start server (webhook, background)
        env:
          NODE_ENV: development
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEBHOOK_SECRET: replace_me
          PUBLIC_BASE_URL: http://localhost:8080
          LOG_LEVEL: warn
          YC_API_KEY: ${{ secrets.YC_API_KEY }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          YC_GPT_MODEL: ${{ secrets.YC_GPT_MODEL }}
          YC_GPT_ENDPOINT: ${{ secrets.YC_GPT_ENDPOINT }}
        run: |
          npm run start:dev > server.log 2>&1 & echo $! > server.pid
          sleep 5

      - name: Wait for health
        run: |
          for i in {1..30}; do
            curl -fsS http://localhost:8080/health && exit 0
            sleep 1
          done
          echo "Server did not become healthy in time" >&2
          echo "Server logs:" >&2
          cat server.log >&2
          exit 1

      - name: Integration smoke tests
        run: |
          npm run smoke:webhook -- --url http://localhost:8080 --secret replace_me
          npm run diagnose:pdf

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            PID=$(cat server.pid)
            if kill -0 "$PID" 2>/dev/null; then
              kill "$PID" || true
            fi
            rm -f server.pid
          fi

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YC_DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Yandex Cloud Serverless Container
        env:
          YC_SA_JSON: ${{ secrets.YC_SA_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          YC_CONTAINER_NAME: ${{ secrets.YC_CONTAINER_NAME }}
          YC_SERVICE_ACCOUNT_ID: ${{ secrets.YC_SERVICE_ACCOUNT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          PUBLIC_BASE_URL: ${{ secrets.PUBLIC_BASE_URL }}
          YC_API_KEY: ${{ secrets.YC_API_KEY }}
          YC_GPT_MODEL: ${{ secrets.YC_GPT_MODEL }}
          YC_GPT_ENDPOINT: ${{ secrets.YC_GPT_ENDPOINT }}
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH=$PATH:$HOME/yandex-cloud/bin

          echo "$YC_SA_JSON" > sa.json
          yc config set service-account-key sa.json
          yc config set cloud-id $YC_CLOUD_ID
          yc config set folder-id $YC_FOLDER_ID

          yc serverless container revision deploy \
            --container-name "$YC_CONTAINER_NAME" \
            --image ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest \
            --service-account-id "$YC_SERVICE_ACCOUNT_ID" \
            --environment TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN,WEBHOOK_SECRET=$WEBHOOK_SECRET,PUBLIC_BASE_URL=$PUBLIC_BASE_URL,LOG_LEVEL=info,YC_API_KEY=$YC_API_KEY,YC_FOLDER_ID=$YC_FOLDER_ID,YC_GPT_MODEL=$YC_GPT_MODEL,YC_GPT_ENDPOINT=$YC_GPT_ENDPOINT \
            --memory 512m \
            --cores 1 \
            --execution-timeout 30s \
            --concurrency 1

      - name: Update Telegram webhook
        if: ${{ success() }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
          PUBLIC_BASE_URL: ${{ secrets.PUBLIC_BASE_URL }}
        run: |
          if [ -z "$PUBLIC_BASE_URL" ]; then
            echo "PUBLIC_BASE_URL is not set, skipping webhook update" >&2
            exit 1
          fi
          WEBHOOK_URL="${PUBLIC_BASE_URL%/}/tg/${WEBHOOK_SECRET}"
          echo "Setting Telegram webhook to $WEBHOOK_URL"
          curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{\"url\":\"${WEBHOOK_URL}\",\"secret_token\":\"${WEBHOOK_SECRET}\"}" \
            | tee webhook-response.json
          if ! grep -q '"ok":true' webhook-response.json; then
            echo "Failed to set webhook" >&2
            cat webhook-response.json >&2
            exit 1
          fi
          rm -f webhook-response.json

      - name: Cleanup
        if: always()
        run: rm -f sa.json
