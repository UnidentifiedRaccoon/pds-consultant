name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: cr.yandex
  IMAGE_NAME: capital-compass

jobs:
  # ========================================
  # –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ò –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
  # ========================================
  test:
    name: Tests and Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.10.0'
          cache: 'npm'

      - name: Install deps (clean)
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

      # üëá —Å–æ–∑–¥–∞—ë–º .env –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï –∫–ª—é—á–∏ –∏–∑ .env.example
      - name: Prepare .env for smokes
        run: |
          cat > .env <<'EOF'
          API_TIMEOUT_MS=7000
          TELEGRAM_BOT_TOKEN=dummy
          YC_API_KEY=dummy
          YC_FOLDER_ID=dummy
          YC_GPT_MODEL=yandexgpt/latest
          YC_GPT_ENDPOINT=https://llm.api.cloud.yandex.net/foundationModels/v1/chat/completions
          BOT_MODE=webhook
          DEV_PORT=8080
          WEBHOOK_SECRET=replace_me
          PUBLIC_BASE_URL=
          LOG_LEVEL=warn
          EOF

      # ========================================
      # –≠–¢–ê–ü 1: –ë–ê–ó–û–í–´–ï SMOKE –¢–ï–°–¢–´ (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)
      # ========================================
      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Run basic smoke tests
        env:
          CI: true
          YC_API_KEY: ${{ secrets.YC_API_KEY }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          YC_GPT_MODEL: ${{ secrets.YC_GPT_MODEL || 'yandexgpt/latest' }}
          YC_GPT_ENDPOINT: ${{ secrets.YC_GPT_ENDPOINT || 'https://llm.api.cloud.yandex.net/foundationModels/v1/chat/completions' }}
        run: npm run smoke:basic

      # ========================================
      # –≠–¢–ê–ü 2: –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ (—Å —Å–µ—Ä–≤–µ—Ä–æ–º)
      # ========================================
      - name: Start server (webhook, background)
        env:
          BOT_MODE: webhook
          DEV_PORT: 8080
          WEBHOOK_SECRET: replace_me
          LOG_LEVEL: warn
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          YC_API_KEY: ${{ secrets.YC_API_KEY }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          YC_GPT_MODEL: ${{ secrets.YC_GPT_MODEL || 'yandexgpt/latest' }}
          YC_GPT_ENDPOINT: ${{ secrets.YC_GPT_ENDPOINT || 'https://llm.api.cloud.yandex.net/foundationModels/v1/chat/completions' }}
        run: |
          node src/index.js > server.log 2>&1 & echo $! > server.pid
          sleep 2

      - name: Wait for health
        run: |
          for i in {1..30}; do
            curl -fsS http://localhost:8080/health && exit 0
            sleep 1
          done
          echo "Server did not become healthy in time" >&2
          echo "Server logs:" >&2
          cat server.log >&2
          exit 1

      - name: Integration smoke tests
        run: |
          echo "Running webhook smoke test..."
          npm run smoke:webhook -- --url http://localhost:8080 --secret replace_me
          echo "Running PDF diagnostics..."
          npm run diagnose:pdf

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            PID=$(cat server.pid)
            if kill -0 "$PID" 2>/dev/null; then
              kill "$PID" || true
            fi
            rm -f server.pid
          fi

  # ========================================
  # –≠–¢–ê–ü 2: –°–ë–û–†–ö–ê –ò –î–ï–ü–õ–û–ô (—Ç–æ–ª—å–∫–æ –¥–ª—è main)
  # ========================================
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    if: github.ref == 'refs/heads/main' # –¢–æ–ª—å–∫–æ –¥–ª—è main –≤–µ—Ç–∫–∏

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Yandex Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: json_key
          password: ${{ secrets.YC_DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Yandex Cloud Serverless Container
        run: |
          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Yandex CLI
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH=$PATH:$HOME/yandex-cloud/bin

          # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é service account
          echo '${{ secrets.YC_SA_JSON }}' > sa.json
          yc config set service-account-key sa.json

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ yc
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–≤–∏–∑–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –∑–∞—Ä–∞–Ω–µ–µ)
          yc serverless container revision deploy \
            --container-name ${{ secrets.YC_CONTAINER_NAME }} \
            --image ${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.IMAGE_NAME }}:latest \
            --service-account-id ${{ secrets.YC_SERVICE_ACCOUNT_ID }} \
            --environment "BOT_MODE=webhook,WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }},PUBLIC_BASE_URL=,LOG_LEVEL=info,API_TIMEOUT_MS=7000,TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }},YC_API_KEY=${{ secrets.YC_API_KEY }},YC_FOLDER_ID=${{ secrets.YC_FOLDER_ID }},YC_GPT_MODEL=${{ secrets.YC_GPT_MODEL }},YC_GPT_ENDPOINT=${{ secrets.YC_GPT_ENDPOINT }}" \
            --memory 512m \
            --cores 1 \
            --execution-timeout 30s \
            --concurrency 1

      - name: Cleanup
        if: always()
        run: |
          rm -f sa.json
