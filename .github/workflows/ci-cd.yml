name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.10.0'
  REGISTRY: ghcr.io

jobs:
  # Job 1: Lint and Type Check
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Type Check
        run: npm run typecheck

  # Job 2: Build
  build:
    name: Build TypeScript
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Job 3: Docker Build & Push
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Job 4: Deploy (–ø—Ä–∏–º–µ—Ä –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://your-bot-url.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # –ü—Ä–∏–º–µ—Ä –¥–ª—è Yandex Cloud (Container Registry)
      - name: Deploy to Yandex Cloud
        if: vars.DEPLOY_PLATFORM == 'yandex-cloud'
        env:
          YC_SA_JSON: ${{ secrets.YC_SA_JSON }}
          YC_REGISTRY_ID: ${{ secrets.YC_REGISTRY_ID }}
        run: |
          echo "Deploying to Yandex Cloud..."
          # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è –≤ Yandex Cloud
          # yc container image list --registry-id $YC_REGISTRY_ID
          echo "Deploy completed"

      # –ü—Ä–∏–º–µ—Ä –¥–ª—è Railway
      - name: Deploy to Railway
        if: vars.DEPLOY_PLATFORM == 'railway'
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          echo "Deploying to Railway..."
          npm install -g @railway/cli
          railway up --service ${{ secrets.RAILWAY_SERVICE }}

      # –ü—Ä–∏–º–µ—Ä –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ SSH
      - name: Deploy via SSH
        if: vars.DEPLOY_PLATFORM == 'ssh'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /app/pds-consultant
            docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest
            docker stop pds-bot || true
            docker rm pds-bot || true
            docker run -d \
              --name pds-bot \
              --restart unless-stopped \
              --env TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
              --env WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }} \
              --env PUBLIC_BASE_URL=${{ secrets.PUBLIC_BASE_URL }} \
              --env LOG_LEVEL=${{ vars.LOG_LEVEL || 'info' }} \
              -p 8080:8080 \
              ${{ env.REGISTRY }}/${{ github.repository }}:latest

  # Job 5: Notify
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Send Telegram notification
        if: vars.ENABLE_TELEGRAM_NOTIFICATIONS == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            üöÄ Deployment Status: ${{ needs.deploy.result }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
            View: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
