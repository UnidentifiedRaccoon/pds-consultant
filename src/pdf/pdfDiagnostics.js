/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
 */

import { chromium } from 'playwright';
import { logger } from '../logger.js';
import { createSimpleReportHtml } from './simpleParser.js';

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
export async function runPdfDiagnostics() {
  const diagnostics = {
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'unknown',
    nodeVersion: process.version,
    platform: process.platform,
    arch: process.arch,
    memoryUsage: process.memoryUsage(),
    tests: {},
  };

  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Playwright
  diagnostics.tests.playwright = await testPlaywrightAvailability();

  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML
  diagnostics.tests.htmlGeneration = await testHtmlGeneration();

  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  diagnostics.tests.fullPdfGeneration = await testFullPdfGeneration();

  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
  diagnostics.tests.systemResources = await testSystemResources();

  return diagnostics;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Playwright
 */
async function testPlaywrightAvailability() {
  const test = {
    name: 'Playwright Availability',
    status: 'unknown',
    error: null,
    details: {},
  };

  try {
    const browser = await chromium.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
      ],
    });

    test.details.browserLaunched = true;

    const context = await browser.newContext();
    test.details.contextCreated = true;

    const page = await context.newPage();
    test.details.pageCreated = true;

    await page.setContent('<html><body><h1>Test</h1></body></html>');
    test.details.contentSet = true;

    await browser.close();
    test.details.browserClosed = true;

    test.status = 'success';
  } catch (error) {
    test.status = 'failed';
    test.error = {
      message: error.message,
      name: error.name,
      code: error.code,
      stack: error.stack,
    };
    logger.error('Playwright —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω', { error: test.error });
  }

  return test;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é HTML
 */
async function testHtmlGeneration() {
  const test = {
    name: 'HTML Generation',
    status: 'unknown',
    error: null,
    details: {},
  };

  try {
    const sampleResponse = `üéØ **–¶–µ–ª—å:** —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:**
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 2

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∏:**
‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞`;

    const html = createSimpleReportHtml(sampleResponse, {
      reportDate: new Date().toLocaleDateString('ru-RU'),
    });

    test.details.htmlLength = html.length;
    test.details.hasContent = html.includes('Capital Compass AI');
    test.details.hasStyles = html.includes('<style>');
    test.details.hasTestContent = html.includes('—Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF');

    test.status = 'success';
  } catch (error) {
    test.status = 'failed';
    test.error = {
      message: error.message,
      name: error.name,
      stack: error.stack,
    };
    logger.error('HTML –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω', { error: test.error });
  }

  return test;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF
 */
async function testFullPdfGeneration() {
  const test = {
    name: 'Full PDF Generation',
    status: 'unknown',
    error: null,
    details: {},
  };

  let browser = null;

  try {
    const sampleResponse = `üéØ **–¶–µ–ª—å:** —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:**
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1: 1000 ‚ÇΩ
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 2: 2000 ‚ÇΩ

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∏:**
‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ 1
‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ 2`;

    const html = createSimpleReportHtml(sampleResponse, {
      reportDate: new Date().toLocaleDateString('ru-RU'),
    });

    test.details.htmlGenerated = true;
    test.details.htmlLength = html.length;

    browser = await chromium.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
      ],
    });

    test.details.browserLaunched = true;

    const context = await browser.newContext({
      viewport: { width: 1200, height: 800 },
    });

    test.details.contextCreated = true;

    const page = await context.newPage();
    test.details.pageCreated = true;

    await page.setContent(html, {
      waitUntil: 'networkidle',
      timeout: 30000,
    });

    test.details.contentSet = true;

    await page.waitForTimeout(1000);
    test.details.fontsLoaded = true;

    const pdfBuffer = await page.pdf({
      format: 'A4',
      printBackground: true,
      margin: {
        top: '20mm',
        right: '15mm',
        bottom: '20mm',
        left: '15mm',
      },
    });

    test.details.pdfGenerated = true;
    test.details.pdfSize = pdfBuffer.length;
    test.details.pdfValid = pdfBuffer.length > 0;

    test.status = 'success';
  } catch (error) {
    test.status = 'failed';
    test.error = {
      message: error.message,
      name: error.name,
      code: error.code,
      stack: error.stack,
    };
    logger.error('–ü–æ–ª–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω', { error: test.error });
  } finally {
    if (browser) {
      try {
        await browser.close();
        test.details.browserClosed = true;
      } catch (closeError) {
        test.details.browserCloseError = closeError.message;
      }
    }
  }

  return test;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
 */
async function testSystemResources() {
  const test = {
    name: 'System Resources',
    status: 'unknown',
    error: null,
    details: {},
  };

  try {
    const memoryUsage = process.memoryUsage();
    const cpuUsage = process.cpuUsage();

    test.details.memoryUsage = memoryUsage;
    test.details.cpuUsage = cpuUsage;
    test.details.uptime = process.uptime();
    test.details.platform = process.platform;
    test.details.arch = process.arch;
    test.details.nodeVersion = process.version;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏
    const memoryMB = memoryUsage.heapUsed / 1024 / 1024;
    test.details.memoryMB = Math.round(memoryMB);
    test.details.memoryOK = memoryMB < 1000; // –ú–µ–Ω–µ–µ 1GB

    test.status = 'success';
  } catch (error) {
    test.status = 'failed';
    test.error = {
      message: error.message,
      name: error.name,
      stack: error.stack,
    };
    logger.error('–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω', { error: test.error });
  }

  return test;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
 */
export function formatDiagnosticsForLogs(diagnostics) {
  const summary = {
    timestamp: diagnostics.timestamp,
    environment: diagnostics.environment,
    overallStatus: 'unknown',
    failedTests: [],
    passedTests: [],
  };

  Object.entries(diagnostics.tests).forEach(([_key, test]) => {
    if (test.status === 'success') {
      summary.passedTests.push(test.name);
    } else if (test.status === 'failed') {
      summary.failedTests.push({
        name: test.name,
        error: test.error?.message || 'Unknown error',
      });
    }
  });

  if (summary.failedTests.length === 0) {
    summary.overallStatus = 'healthy';
  } else if (summary.passedTests.length === 0) {
    summary.overallStatus = 'critical';
  } else {
    summary.overallStatus = 'degraded';
  }

  return summary;
}
