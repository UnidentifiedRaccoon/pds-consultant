/**
 * –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä markdown-–æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –≤ HTML –¥–ª—è PDF-–æ—Ç—á—ë—Ç–æ–≤
 * –°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * @param {string} botResponse - –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ markdown-—Ñ–æ—Ä–º–∞—Ç–µ
 * @returns {Object} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
function extractSimpleData(botResponse) {
  const data = {
    goal: '',
    results: [],
    scenarios: [],
    tips: [],
    risks: [],
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º null/undefined
  if (!botResponse || typeof botResponse !== 'string') {
    return data;
  }

  const lines = botResponse.split('\n').map((line) => line.trim());

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–ª—å
  for (const line of lines) {
    if (line.includes('üéØ') && line.includes('–¶–µ–ª—å:')) {
      data.goal = line
        .replace(/.*üéØ.*–¶–µ–ª—å:\s*/, '')
        .replace(/\*\*/g, '')
        .trim();
      break;
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  let inResults = false;
  for (const line of lines) {
    if (line.includes('üìä') && line.includes('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')) {
      inResults = true;
      continue;
    }
    if (inResults && (line.includes('üéõÔ∏è') || line.includes('üí°') || line.includes('‚ö†Ô∏è'))) {
      inResults = false;
    }
    if (inResults && line.startsWith('‚Ä¢')) {
      data.results.push(line.replace('‚Ä¢', '').trim());
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
  let inScenarios = false;
  for (const line of lines) {
    if (line.includes('üéõÔ∏è') && line.includes('–°—Ü–µ–Ω–∞—Ä–∏–∏')) {
      inScenarios = true;
      continue;
    }
    if (inScenarios && (line.includes('üí°') || line.includes('‚ö†Ô∏è'))) {
      inScenarios = false;
    }
    if (inScenarios && line.startsWith('‚Ä¢')) {
      data.scenarios.push(line.replace('‚Ä¢', '').trim());
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
  let inTips = false;
  for (const line of lines) {
    if (line.includes('üí°') && line.includes('–ü–æ–¥—Å–∫–∞–∑–∫–∏')) {
      inTips = true;
      continue;
    }
    if (inTips && line.includes('‚ö†Ô∏è')) {
      inTips = false;
    }
    if (inTips && line.startsWith('‚Ä¢')) {
      data.tips.push(line.replace('‚Ä¢', '').trim());
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Ä–∏—Å–∫–∏
  let inRisks = false;
  for (const line of lines) {
    if (line.includes('‚ö†Ô∏è') && (line.includes('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è') || line.includes('—Ä–∏—Å–∫–∏'))) {
      inRisks = true;
      continue;
    }
    if (inRisks && line.includes('üéØ')) {
      inRisks = false;
    }
    if (inRisks && line.startsWith('‚Ä¢')) {
      data.risks.push(line.replace('‚Ä¢', '').trim());
    }
  }

  return data;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π HTML-–æ—Ç—á–µ—Ç
 * @param {string} botResponse - –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ markdown-—Ñ–æ—Ä–º–∞—Ç–µ
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @param {string} options.reportDate - –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞
 * @returns {string} –ü–æ–ª–Ω—ã–π HTML-–æ—Ç—á—ë—Ç
 */
export function createSimpleReportHtml(botResponse, options = {}) {
  const reportDate =
    options.reportDate ||
    new Date().toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  const data = extractSimpleData(botResponse);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  const content = createSimpleContent(data);

  // HTML —à–∞–±–ª–æ–Ω
  const template = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á—ë—Ç –ø–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º - Capital Compass AI</title>
    <style>
        /* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –≤–º–µ—Å—Ç–æ Google Fonts –¥–ª—è serverless */
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #1a1a1a;
            background: #ffffff;
            font-size: 16px;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 40px 30px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 3px solid #2563eb;
        }
        
        .logo {
            font-size: 24px;
            font-weight: 700;
            color: #2563eb;
            margin-bottom: 8px;
        }
        
        .subtitle {
            font-size: 14px;
            color: #6b7280;
            font-weight: 400;
        }
        
        .report-date {
            font-size: 12px;
            color: #9ca3af;
            margin-top: 10px;
        }
        
        .content {
            line-height: 1.8;
        }
        
        .section {
            margin-bottom: 25px;
        }
        
        .section-title {
            font-size: 16px;
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .section-content {
            font-size: 14px;
            color: #374151;
        }
        
        .section-content ul {
            margin: 8px 0;
            padding-left: 20px;
        }
        
        .section-content li {
            margin-bottom: 6px;
        }
        
        .amount {
            color: #059669;
            font-weight: 600;
        }
        
        .emoji {
            font-size: 14px;
            margin-right: 6px;
        }
        
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            text-align: center;
            color: #6b7280;
            font-size: 11px;
        }
        
        .footer .disclaimer {
            margin-top: 8px;
            font-style: italic;
        }
        
        @media print {
            body {
                font-size: 14px;
            }
            
            .container {
                padding: 20px;
            }
            
            .header {
                margin-bottom: 30px;
            }
            
            .section {
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">üéØ Capital Compass AI</div>
            <div class="subtitle">–û—Ç—á—ë—Ç –ø–æ –ø–µ–Ω—Å–∏–æ–Ω–Ω—ã–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è–º</div>
            <div class="report-date">${reportDate}</div>
        </div>
        
        <div class="content">
            ${content}
        </div>
        
        <div class="footer">
            <div>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º Capital Compass AI</div>
            <div class="disclaimer">
                –î–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. 
                –†–∞—Å—á—ë—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ 10% –≥–æ–¥–æ–≤—ã—Ö. 
                –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.
            </div>
        </div>
    </div>
</body>
</html>`;

  return template;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—á–µ—Ç–∞
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
 * @returns {string} HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
 */
function createSimpleContent(data) {
  let html = '';

  // –¶–µ–ª—å
  if (data.goal) {
    html += `
      <div class="section">
        <div class="section-title">
          <span class="emoji">üéØ</span>
          <span>–¶–µ–ª—å</span>
        </div>
        <div class="section-content">
          <p>${escapeHtml(data.goal)}</p>
        </div>
      </div>
    `;
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞
  if (data.results.length > 0) {
    html += `
      <div class="section">
        <div class="section-title">
          <span class="emoji">üìä</span>
          <span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞</span>
        </div>
        <div class="section-content">
          <ul>
    `;

    data.results.forEach((result) => {
      // –í—ã–¥–µ–ª—è–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—É–º–º—ã
      const formattedResult = result.replace(/(\d+[\s\d]*)\s*‚ÇΩ/g, '<span class="amount">$&</span>');
      html += `<li>${formattedResult}</li>`;
    });

    html += `
          </ul>
        </div>
      </div>
    `;
  }

  // –°—Ü–µ–Ω–∞—Ä–∏–∏
  if (data.scenarios.length > 0) {
    html += `
      <div class="section">
        <div class="section-title">
          <span class="emoji">üéõÔ∏è</span>
          <span>–°—Ü–µ–Ω–∞—Ä–∏–∏</span>
        </div>
        <div class="section-content">
          <ul>
    `;

    data.scenarios.forEach((scenario) => {
      html += `<li>${escapeHtml(scenario)}</li>`;
    });

    html += `
          </ul>
        </div>
      </div>
    `;
  }

  // –ü–æ–¥—Å–∫–∞–∑–∫–∏
  if (data.tips.length > 0) {
    html += `
      <div class="section">
        <div class="section-title">
          <span class="emoji">üí°</span>
          <span>–ü–æ–¥—Å–∫–∞–∑–∫–∏</span>
        </div>
        <div class="section-content">
          <ul>
    `;

    data.tips.forEach((tip) => {
      html += `<li>${escapeHtml(tip)}</li>`;
    });

    html += `
          </ul>
        </div>
      </div>
    `;
  }

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Ä–∏—Å–∫–∏
  if (data.risks.length > 0) {
    html += `
      <div class="section">
        <div class="section-title">
          <span class="emoji">‚ö†Ô∏è</span>
          <span>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/—Ä–∏—Å–∫–∏</span>
        </div>
        <div class="section-content">
          <ul>
    `;

    data.risks.forEach((risk) => {
      html += `<li>${escapeHtml(risk)}</li>`;
    });

    html += `
          </ul>
        </div>
      </div>
    `;
  }

  return html;
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–∏–º–≤–æ–ª—ã
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeHtml(text) {
  const map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;',
  };

  return text.replace(/[&<>"']/g, (m) => map[m]);
}
