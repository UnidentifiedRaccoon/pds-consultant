/**
 * –†–∞—Å—á—ë—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ü–î–°-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 * –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Telegram API
 */

import { MONTHLY_RATE } from '../state/types.js';

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {number} –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª
 */
export function calculateFinalCapital(data) {
  const {
    monthlyContribution = 0,
    annualContribution = 0,
    startingCapital = 0,
    opsTransfer = 0,
    horizonYears = 0,
  } = data;

  if (horizonYears <= 0) return 0;

  const months = horizonYears * 12;
  const monthlyRate = MONTHLY_RATE;

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–∂–µ–≥–æ–¥–Ω—ã–π –≤–∑–Ω–æ—Å –≤ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
  const effectiveMonthlyContribution = monthlyContribution + annualContribution / 12;

  // –ö–∞–ø–∏—Ç–∞–ª –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
  const capitalFromStarting = startingCapital * Math.pow(1 + monthlyRate, months);

  // –ö–∞–ø–∏—Ç–∞–ª –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –û–ü–°
  const capitalFromOps = opsTransfer * Math.pow(1 + monthlyRate, months);

  // –ö–∞–ø–∏—Ç–∞–ª –∏–∑ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã—Ö –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤
  let capitalFromContributions = 0;
  if (effectiveMonthlyContribution > 0) {
    capitalFromContributions =
      effectiveMonthlyContribution * ((Math.pow(1 + monthlyRate, months) - 1) / monthlyRate);
  }

  return capitalFromStarting + capitalFromOps + capitalFromContributions;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –ª–∏—á–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {number} –û–±—â–∞—è —Å—É–º–º–∞ –ª–∏—á–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤
 */
export function calculatePersonalContributions(data) {
  const { monthlyContribution = 0, annualContribution = 0, horizonYears = 0 } = data;

  if (horizonYears <= 0) return 0;

  const months = horizonYears * 12;
  const monthlyTotal = monthlyContribution * months;
  const annualTotal = annualContribution * horizonYears;

  return monthlyTotal + annualTotal;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {number} –†–∞–∑–º–µ—Ä –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –≤–∑–Ω–æ—Å–æ–≤
 */
export function calculateMonthlyPersonalContribution(data) {
  const { monthlyContribution = 0, annualContribution = 0 } = data;

  return monthlyContribution + annualContribution / 12;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {number} –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥
 */
export function calculateInvestmentIncome(data) {
  const finalCapital = calculateFinalCapital(data);
  const personalContributions = calculatePersonalContributions(data);
  const { startingCapital = 0, opsTransfer = 0 } = data;

  return finalCapital - (personalContributions + startingCapital + opsTransfer);
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–ø–ª–∞—Ç
 * @param {number} finalCapital - –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª
 * @returns {Object} –í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–ø–ª–∞—Ç
 */
export function calculatePayouts(finalCapital) {
  // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞—Ä–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
  const LIFETIME_COEFFICIENT = 240; // 20 –ª–µ—Ç * 12 –º–µ—Å—è—Ü–µ–≤ (—á–µ—Ä–Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å)
  const TEN_YEARS_COEFFICIENT = 120; // 10 –ª–µ—Ç * 12 –º–µ—Å—è—Ü–µ–≤

  return {
    lifetime: finalCapital / LIFETIME_COEFFICIENT,
    tenYears: finalCapital / TEN_YEARS_COEFFICIENT,
    lumpSum: finalCapital,
  };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
 * @param {number} targetCapital - –¶–µ–ª–µ–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {number} –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å
 */
export function calculateRequiredMonthlyContribution(targetCapital, data) {
  const { startingCapital = 0, opsTransfer = 0, horizonYears = 0 } = data;

  if (horizonYears <= 0) return 0;

  const months = horizonYears * 12;
  const monthlyRate = MONTHLY_RATE;

  // –ö–∞–ø–∏—Ç–∞–ª –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –û–ü–°
  const capitalFromStarting = startingCapital * Math.pow(1 + monthlyRate, months);
  const capitalFromOps = opsTransfer * Math.pow(1 + monthlyRate, months);
  const availableCapital = capitalFromStarting + capitalFromOps;

  // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª —É–∂–µ –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ
  if (availableCapital >= targetCapital) {
    return 0;
  }

  // –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–∞–ø–∏—Ç–∞–ª –æ—Ç –≤–∑–Ω–æ—Å–æ–≤
  const requiredFromContributions = targetCapital - availableCapital;

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å
  const annuityFactor = (Math.pow(1 + monthlyRate, months) - 1) / monthlyRate;
  const requiredMonthlyContribution = requiredFromContributions / annuityFactor;

  return Math.max(0, requiredMonthlyContribution);
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ü–î–°
 * @param {Object} data - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞
 */
export function calculatePDS(data) {
  const finalCapital = calculateFinalCapital(data);
  const personalContributions = calculatePersonalContributions(data);
  const monthlyPersonalContribution = calculateMonthlyPersonalContribution(data);
  const investmentIncome = calculateInvestmentIncome(data);
  const payouts = calculatePayouts(finalCapital);

  return {
    personalContributions,
    monthlyPersonalContribution,
    governmentSupport: 0, // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    opsTransfer: data.opsTransfer || 0,
    investmentIncome,
    taxDeduction: 0, // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    finalCapital,
    payouts,
  };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –∫–∞–∫ –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É
 * @param {number} amount - –°—É–º–º–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
export function formatCurrency(amount) {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
export function formatCalculationResult(result) {
  const {
    personalContributions,
    monthlyPersonalContribution,
    governmentSupport,
    opsTransfer,
    investmentIncome,
    taxDeduction,
    finalCapital,
    payouts,
  } = result;

  return `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –ü–î–°

üí∞ –õ–∏—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã: ${formatCurrency(personalContributions)}
üìÖ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤–∑–Ω–æ—Å—ã: ${formatCurrency(monthlyPersonalContribution)}
üèõÔ∏è –ì–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${formatCurrency(governmentSupport)} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üè¶ –ü–µ—Ä–µ–≤–æ–¥ –û–ü–°: ${formatCurrency(opsTransfer)}
üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥: ${formatCurrency(investmentIncome)}
üßæ –ù–∞–ª–æ–≥–æ–≤—ã–π –≤—ã—á–µ—Ç: ${formatCurrency(taxDeduction)} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üíé –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${formatCurrency(finalCapital)}

üí∏ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:
‚Ä¢ –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ (—á–µ—Ä–Ω–æ–≤–∞—è): ${formatCurrency(payouts.lifetime)}
‚Ä¢ –ù–∞ 10 –ª–µ—Ç: ${formatCurrency(payouts.tenYears)}
‚Ä¢ –ï–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: ${formatCurrency(payouts.lumpSum)}`;
}
